

class TestOne:
    feature_a = {1, 8, 15, 17, 42, 46, 52, 58, 83, 87, 93, 96, 124, 128, 131, 138, 165, 169, 173, 176}
    feature_b = {21, 27, 33, 36, 62, 68, 71, 78, 101, 106, 113, 116, 141, 148, 151, 158, 181, 188, 192, 196}
    feature_c = {2, 6, 11, 18, 43, 47, 53, 56, 81, 86, 91, 97, 122, 130, 132, 136, 164, 166, 171, 177}
    feature_d = {22, 26, 32, 40, 61, 67, 73, 76, 102, 108, 111, 117, 142, 146, 153, 156, 184, 186, 191, 197}
    feature_e = {3, 7, 12, 16, 41, 48, 51, 57, 85, 90, 92, 99, 121, 127, 134, 137, 162, 168, 175, 179}
    feature_f = {23, 29, 31, 38, 65, 66, 72, 79, 103, 107, 114, 120, 145, 147, 154, 159, 185, 187, 195, 199}
    feature_g = {4, 10, 13, 20, 45, 49, 55, 60, 82, 89, 95, 100, 123, 126, 133, 140, 161, 167, 172, 180}
    feature_h = {24, 30, 35, 37, 63, 70, 74, 80, 105, 109, 115, 119, 143, 150, 152, 152, 157, 182, 189, 194, 198}
    feature_i = {5, 9, 14, 19, 44, 50, 54, 59, 84, 88, 94, 98, 125, 129, 135, 139, 163, 170, 174, 178}
    feature_j = {25, 28, 34, 39, 64, 59, 75, 77, 104, 110, 112, 118, 144, 149, 155, 160, 183, 190, 193, 200}

    scores = {
        '1': (2, 4, 6),
        '2': (6, 5, 3),
        '3': (6, 4, 3),
        '4': (3, 4, 6),
        '5': (4, 4, 5),
        '6': (3, 3, 6),
        '7': (3, 4, 5),
        '8': (2, 4, 5),
        '9': (3, 4, 4),
        '10': (5, 4, 4),

        '11': (3, 4, 5),
        '12': (2, 4, 6),
        '13': (5, 4, 3),
        '14': (2, 4, 5),
        '15': (3, 3, 6),
        '16': (3, 4, 4),
        '17': (2, 4, 5),
        '18': (2, 6, 6),
        '19': (5, 3, 3),
        '20': (5, 5, 3),

        '21': (2, 3, 6),
        '22': (1, 5, 6),
        '23': (5, 4, 3),
        '24': (3, 5, 6),
        '25': (3, 1, 5),
        '26': (2, 3, 6),
        '27': (5, 4, 4),
        '28': (6, 2, 2),
        '29': (6, 3, 3),
        '30': (3, 4, 6),

        '31': (5, 4, 4),
        '32': (2, 4, 6),
        '33': (6, 5, 3),
        '34': (6, 3, 3),
        '35': (5, 5, 2),
        '36': (3, 5, 6),
        '37': (3, 4, 6),
        '38': (4, 4, 5),
        '39': (3, 4, 5),
        '40': (2, 3, 5),

        '41': (6, 4, 4),
        '42': (5, 3, 3),
        '43': (4, 4, 5),
        '44': (2, 3, 6),
        '45': (3, 4, 5),
        '46': (3, 3, 5),
        '47': (2, 5, 6),
        '48': (3, 4, 5),
        '49': (6, 4, 4),
        '50': (4, 4, 3),

        '51': (5, 4, 2),
        '52': (3, 4, 4),
        '53': (3, 4, 6),
        '54': (6, 3, 3),
        '55': (2, 5, 6),
        '56': (5, 3, 3),
        '57': (5, 4, 4),
        '58': (6, 3, 3),
        '59': (1, 3, 5),
        '60': (2, 5, 6),

        '61': (2, 4, 6),
        '62': (5, 4, 4),
        '63': (5, 4, 4),
        '64': (2, 2, 6),
        '65': (4, 4, 5),
        '66': (6, 4, 3),
        '67': (2, 4, 5),
        '68': (6, 4, 3),
        '69': (6, 3, 3),
        '70': (4, 4, 5),

        '71': (3, 5, 6),
        '72': (3, 4, 4),
        '73': (2, 4, 5),
        '74': (2, 4, 6),
        '75': (5, 3, 3),
        '76': (1, 3, 6),
        '77': (6, 2, 2),
        '78': (2, 5, 6),
        '79': (5, 4, 3),

        '80': (6, 3, 3),
        '81': (6, 3, 3),
        '82': (3, 4, 6),
        '83': (3, 3, 6),
        '84': (6, 3, 2),
        '85': (6, 3, 3),
        '86': (2, 4, 6),
        '87': (3, 3, 5),
        '88': (5, 4, 3),
        '89': (2, 5, 6),
        '90': (3, 3, 5),

        '91': (3, 4, 6),
        '92': (3, 4, 4),
        '93': (5, 3, 3),
        '94': (5, 4, 4),
        '95': (3, 4, 5),
        '96': (6, 4, 2),
        '97': (5, 5, 3),
        '98': (4, 4, 5),
        '99': (2, 4, 5),
        '100': (4, 3, 1),

        '101': (5, 4, 4),
        '102': (2, 3, 5),
        '103': (4, 4, 6),
        '104': (2, 3, 6),
        '105': (6, 4, 3),
        '106': (2, 3, 7),
        '107': (2, 3, 6),
        '108': (3, 4, 5),
        '109': (3, 4, 5),
        '110': (5, 4, 4),

        '111': (2, 4, 5),
        '112': (6, 2, 2),
        '113': (6, 4, 3),
        '114': (6, 4, 3),
        '115': (3, 4, 6),
        '116': (6, 4, 3),
        '117': (3, 4, 5),
        '118': (7, 2, 2),
        '119': (5, 4, 3),
        '120': (5, 4, 3),

        '121': (4, 4, 5),
        '122': (3, 4, 6),
        '123': (5, 4, 3),
        '124': (2, 3, 6),
        '125': (1, 3, 4),
        '126': (4, 4, 6),
        '127': (5, 4, 4),
        '128': (3, 4, 6),
        '129': (2, 5, 6),
        '130': (3, 5, 6),

        '131': (5, 3, 2),
        '132': (2, 4, 6),
        '133': (6, 4, 3),
        '134': (4, 4, 3),
        '135': (2, 4, 5),
        '136': (3, 5, 5),
        '137': (3, 3, 6),
        '138': (5, 3, 3),
        '139': (5, 4, 4),
        '140': (2, 5, 6),

        '141': (2, 5, 6),
        '142': (1, 3, 5),
        '143': (2, 4, 6),
        '144': (5, 4, 3),
        '145': (5, 5, 3),
        '146': (1, 3, 5),
        '147': (6, 4, 4),
        '148': (3, 4, 6),
        '149': (3, 5, 5),
        '150': (2, 5, 6),

        '151': (2, 5, 6),
        '152': (6, 5, 3),
        '153': (2, 4, 6),
        '154': (3, 3, 5),
        '155': (7, 1, 1),
        '156': (6, 4, 2),
        '157': (7, 5, 2),
        '158': (5, 5, 3),
        '159': (5, 4, 2),
        '160': (2, 2, 6),

        '161': (2, 5, 6),
        '162': (6, 4, 3),
        '163': (5, 4, 4),
        '164': (5, 5, 2),
        '165': (6, 3, 3),
        '166': (3, 3, 6),
        '167': (6, 4, 2),
        '168': (6, 4, 3),
        '169': (2, 3, 6),
        '170': (3, 4, 5),

        '171': (3, 3, 6),
        '172': (3, 4, 6),
        '173': (6, 3, 2),
        '174': (5, 4, 3),
        '175': (0, 1, 5),
        '176': (2, 2, 6),
        '177': (6, 4, 4),
        '178': (5, 3, 3),
        '179': (0, 1, 5),
        '180': (3, 5, 6),

        '181': (3, 3, 6),
        '182': (3, 4, 6),
        '183': (2, 4, 6),
        '184': (3, 4, 6),
        '185': (6, 6, 3),
        '186': (1, 3, 5),
        '187': (3, 3, 5),
        '188': (2, 2, 6),
        '189': (3, 5, 5),
        '190': (6, 2, 2),

        '191': (1, 4, 5),
        '192': (2, 4, 6),
        '193': (5, 4, 3),
        '194': (4, 5, 6),
        '195': (6, 4, 2),
        '196': (2, 5, 6),
        '197': (2, 4, 5),
        '198': (2, 5, 6),
        '199': (0, 3, 5),
        '200': (5, 3, 3),
    }

    class PercentForMan:
        feature_a_max = (110, 99)
        feature_a_min = (67, -100)
        feature_a = {
            '110': 99,
            '109': 96,
            '108': 95,
            '107': 94,
            '106': 92,
            '104': 82,
            '103': 78,
            '102': 74,
            '101': 68,
            '100': 62,
            '99': 56,
            '98': 50,
            '97': 42,
            '96': 36,
            '95': 28,
            '94': 22,
            '93': 14,
            '92': 8,
            '91': 0,
            '90': -6,
            '89': -14,
            '88': -20,
            '87': -28,
            '86': -34,
            '85': -40,
            '84': -46,
            '83': -52,
            '82': -58,
            '81': -64,
            '80': -74,
            '79': -76,
            '78': -80,
            '77': -82,
            '76': -84,
            '75': -88,
            '74': -92,
            '73': -94,
            '72': -96,
            '71': -96,
            '70': -97,
            '69': -98,
            '68': -99,
            '67': -100,
        }

        feature_b_max = (117, 92)
        feature_b_min = (75, -100)
        feature_b = {
            '117': 92,
            '116': 88,
            '115': 84,
            '114': 78,
            '113': 72,
            '112': 64,
            '111': 56,
            '110': 48,
            '109': 40,
            '108': 32,
            '107': 24,
            '106': 16,
            '105': 8,
            '104': 2,
            '103': -4,
            '102': -12,
            '101': -18,
            '100': -24,
            '99': -28,
            '98': -34,
            '97': -40,
            '96': -44,
            '95': -50,
            '94': -55,
            '93': -60,
            '92': -66,
            '91': -70,
            '90': -78,
            '89': -80,
            '88': -82,
            '87': -86,
            '86': -88,
            '85': -90,
            '84': -92,
            '83': -93,
            '82': -94,
            '81': -95,
            '80': -95,
            '79': -96,
            '78': -97,
            '77': -98,
            '76': -99,
            '75': -100,
        }

        feature_c_max = (114, 94)
        feature_c_min = (65, -100)
        feature_c = {
            '114': 94,
            '113': 88,
            '112': 82,
            '111': 74,
            '110': 68,
            '109': 60,
            '108': 54,
            '107': 48,
            '106': 40,
            '104': 28,
            '103': 20,
            '102': 14,
            '101': 8,
            '100': 2,
            '99': -4,
            '98': -10,
            '97': -16,
            '96': -22,
            '95': -28,
            '94': -34,
            '93': -40,
            '92': -46,
            '91': -52,
            '90': -58,
            '89': -64,
            '88': -70,
            '87': -76,
            '86': -82,
            '85': -86,
            '84': -90,
            '83': -92,
            '82': -94,
            '81': -96,
            '80': -97,
            '79': -98,
            '78': -98,
            '77': -98,
            '76': -98,
            '75': -99,
            '74': -99,
            '73': -99,
            '72': -99,
            '71': -99,
            '70': -99,
            '69': -99,
            '68': -99,
            '67': -99,
            '66': -99,
            '65': -100,
        }

        feature_d_max = (108, 98)
        feature_d_min = (38, -100)
        feature_d = {
            '108': 98,
            '107': 98,
            '106': 98,
            '104': 98,
            '103': 98,
            '102': 96,
            '101': 95,
            '100': 92,
            '99': 90,
            '98': 88,
            '97': 85,
            '96': 80,
            '95': 76,
            '94': 70,
            '93': 68,
            '92': 66,
            '91': 62,
            '90': 58,
            '89': 54,
            '88': 52,
            '87': 50,
            '86': 48,
            '85': 46,
            '84': 44,
            '83': 42,
            '82': 40,
            '81': 38,
            '80': 36,
            '79': 34,
            '78': 32,
            '77': 30,
            '76': 28,
            '75': 20,
            '74': 14,
            '73': 8,
            '72': 2,
            '71': -2,
            '70': -6,
            '69': -8,
            '68': -10,
            '67': -12,
            '66': -16,
            '65': -20,
            '64': -24,
            '63': -28,
            '62': -30,
            '61': -36,
            '60': -42,
            '59': -48,
            '58': -50,
            '57': -52,
            '56': -56,
            '55': -60,
            '54': -62,
            '53': -64,
            '52': -70,
            '51': -76,
            '50': -76,
            '49': -82,
            '48': -86,
            '47': -90,
            '46': -92,
            '45': -93,
            '44': -94,
            '43': -95,
            '42': -96,
            '41': -97,
            '40': -98,
            '39': -99,
            '38': -100,
        }

        feature_e_max = (104, 100)
        feature_e_min = (54, -99)
        feature_e = {
            '104': 100,
            '103': 99,
            '102': 98,
            '101': 97,
            '100': 94,
            '99': 93,
            '98': 90,
            '97': 88,
            '96': 84,
            '95': 80,
            '94': 76,
            '93': 72,
            '92': 70,
            '91': 66,
            '90': 62,
            '89': 58,
            '88': 54,
            '87': 50,
            '86': 48,
            '85': 46,
            '84': 44,
            '83': 40,
            '82': 36,
            '81': 32,
            '80': 28,
            '79': 24,
            '78': 20,
            '77': 16,
            '76': 12,
            '75': 8,
            '74': 4,
            '73': -2,
            '72': -6,
            '71': -12,
            '70': -18,
            '69': -24,
            '68': -30,
            '67': -36,
            '66': -40,
            '65': -46,
            '64': -50,
            '63': -56,
            '62': -62,
            '61': -70,
            '60': -76,
            '59': -82,
            '58': -90,
            '57': -92,
            '56': -94,
            '55': -98,
            '54': -99,
        }

        feature_f_max = (108, 100)
        feature_f_min = (58, -100)
        feature_f = {
            '108': 100,
            '107': 99,
            '106': 98,
            '104': 97,
            '103': 95,
            '102': 94,
            '101': 93,
            '100': 92,
            '99': 91,
            '98': 90,
            '97': 88,
            '96': 86,
            '95': 82,
            '94': 78,
            '93': 74,
            '92': 70,
            '91': 60,
            '90': 56,
            '89': 52,
            '88': 48,
            '87': 44,
            '86': 40,
            '85': 36,
            '84': 32,
            '83': 28,
            '82': 24,
            '81': 20,
            '80': 16,
            '79': 12,
            '78': 8,
            '77': 4,
            '76': -2,
            '75': -12,
            '74': -20,
            '73': -30,
            '72': -40,
            '71': -50,
            '70': -58,
            '69': -64,
            '68': -72,
            '67': -80,
            '66': -85,
            '65': -90,
            '64': -94,
            '63': -95,
            '62': -96,
            '61': -97,
            '60': -98,
            '59': -99,
            '58': -100,
        }

        feature_g_max = (112, 99)
        feature_g_min = (62, -100)
        feature_g = {
            '112': 99,
            '111': 96,
            '110': 94,
            '109': 92,
            '108': 88,
            '107': 82,
            '106': 74,
            '105': 66,
            '104': 56,
            '103': 46,
            '102': 36,
            '101': 28,
            '100': 20,
            '99': 16,
            '98': 12,
            '97': 4,
            '96': -4,
            '95': -12,
            '94': -18,
            '93': -26,
            '92': -32,
            '91': -40,
            '90': -46,
            '89': -52,
            '88': -56,
            '87': -62,
            '86': -66,
            '85': -72,
            '84': -76,
            '83': -80,
            '82': -82,
            '81': -84,
            '80': -86,
            '79': -88,
            '78': -88,
            '77': -90,
            '76': -92,
            '75': -92,
            '74': -94,
            '73': -96,
            '72': -98,
            '71': -98,
            '70': -99,
            '69': -99,
            '68': -99,
            '67': -99,
            '66': -99,
            '65': -99,
            '64': -99,
            '63': -99,
            '62': -100,
        }

        feature_h_max = (115, 100)
        feature_h_min = (62, -100)
        feature_h = {
            '115': 100,
            '114': 90,
            '113': 84,
            '112': 78,
            '111': 72,
            '110': 64,
            '109': 56,
            '108': 48,
            '107': 40,
            '106': 36,
            '104': 16,
            '103': 2,
            '102': -4,
            '101': -10,
            '100': -14,
            '99': -18,
            '98': -24,
            '97': -28,
            '96': -32,
            '95': -36,
            '94': -42,
            '93': -46,
            '92': -50,
            '91': -54,
            '90': -58,
            '89': -62,
            '88': -66,
            '87': -70,
            '86': -74,
            '85': -76,
            '84': -78,
            '83': -80,
            '82': -84,
            '81': -86,
            '80': -87,
            '79': -88,
            '78': -89,
            '77': -90,
            '76': -90,
            '75': -90,
            '74': -91,
            '73': -92,
            '72': -93,
            '71': -94,
            '70': -95,
            '69': -96,
            '68': -96,
            '67': -96,
            '66': -97,
            '65': -98,
            '64': -98,
            '63': -99,
            '62': -100,
        }

        feature_i_max = (101, 100)
        feature_i_min = (63, -100)
        feature_i = {
            '101': 100,
            '100': 99,
            '99': 98,
            '98': 97,
            '97': 96,
            '96': 90,
            '95': 86,
            '94': 82,
            '93': 80,
            '92': 72,
            '91': 60,
            '90': 46,
            '89': 32,
            '88': 18,
            '87': 2,
            '86': -10,
            '85': -22,
            '84': -34,
            '83': -46,
            '82': -56,
            '81': -64,
            '80': -70,
            '79': -76,
            '78': -80,
            '77': -86,
            '76': -90,
            '75': -92,
            '74': -95,
            '73': -96,
            '72': -96,
            '71': -97,
            '70': -97,
            '69': -98,
            '68': -98,
            '67': -99,
            '66': -99,
            '65': -99,
            '64': -99,
            '63': -100,
        }

        feature_j_max = (114, 100)
        feature_j_min = (53, -100)
        feature_j = {
            '114': 100,
            '113': 99,
            '112': 98,
            '111': 97,
            '110': 96,
            '109': 90,
            '108': 80,
            '107': 76,
            '106': 70,
            '104': 62,
            '103': 60,
            '102': 58,
            '101': 54,
            '100': 50,
            '99': 44,
            '98': 38,
            '97': 30,
            '96': 22,
            '95': 16,
            '94': 8,
            '93': 2,
            '92': -4,
            '91': -10,
            '90': -14,
            '89': -20,
            '88': -24,
            '87': -28,
            '86': -32,
            '85': -36,
            '84': -40,
            '83': -44,
            '82': -46,
            '81': -50,
            '80': -56,
            '79': -58,
            '78': -60,
            '77': -62,
            '76': -64,
            '75': -68,
            '74': -70,
            '73': -72,
            '72': -74,
            '71': -76,
            '70': -77,
            '69': -78,
            '68': -80,
            '67': -82,
            '66': -84,
            '65': -86,
            '64': -90,
            '63': -92,
            '62': -94,
            '61': -95,
            '60': -96,
            '59': -97,
            '58': -98,
            '57': -99,
            '56': -99,
            '55': -99,
            '54': -99,
            '53': -100,
        }

    class PercentForWoman:
        feature_a_max = (110, 99)
        feature_a_min = (59, -100)
        feature_a = {
            '110': 99,
            '109': 98,
            '108': 96,
            '107': 94,
            '106': 92,
            '104': 88,
            '103': 86,
            '102': 84,
            '101': 80,
            '100': 78,
            '99': 76,
            '98': 72,
            '97': 70,
            '96': 66,
            '95': 62,
            '94': 58,
            '93': 54,
            '92': 48,
            '91': 42,
            '90': 36,
            '89': 28,
            '88': 20,
            '87': 12,
            '86': 4,
            '85': -4,
            '84': -12,
            '83': -20,
            '82': -26,
            '81': -28,
            '80': -38,
            '79': -44,
            '78': -50,
            '77': -54,
            '76': -60,
            '75': -64,
            '74': -70,
            '73': -74,
            '72': -78,
            '71': -84,
            '70': -88,
            '69': -90,
            '68': -92,
            '67': -94,
            '66': -95,
            '65': -96,
            '64': -97,
            '63': -98,
            '62': -99,
            '61': -99,
            '60': -99,
            '59': -100
        }

        feature_b_max = (110, 98)
        feature_b_min = (58, -100)
        feature_b = {
            '111': 98,
            '110': 92,
            '109': 86,
            '108': 80,
            '107': 74,
            '106': 66,
            '104': 54,
            '103': 46,
            '102': 38,
            '101': 30,
            '100': 20,
            '99': 10,
            '98': 2,
            '97': -4,
            '96': -10,
            '95': -16,
            '94': -22,
            '93': -28,
            '92': -32,
            '91': -38,
            '90': -40,
            '89': -44,
            '88': -46,
            '87': -50,
            '86': -54,
            '85': -58,
            '84': -62,
            '83': -66,
            '82': -68,
            '81': -72,
            '80': -76,
            '79': -80,
            '78': -82,
            '77': -86,
            '76': -88,
            '75': -90,
            '74': -91,
            '73': -92,
            '72': -92,
            '71': -93,
            '70': -93,
            '69': -94,
            '68': -94,
            '67': -95,
            '66': -96,
            '65': -96,
            '64': -96,
            '63': -97,
            '62': -97,
            '61': -98,
            '60': -99,
            '59': -99,
            '58': -100,
        }

        feature_c_max = (108, 98)
        feature_c_min = (59, -100)
        feature_c = {
            '108': 98,
            '107': 96,
            '106': 98,
            '104': 88,
            '103': 84,
            '102': 80,
            '101': 76,
            '100': 70,
            '99': 64,
            '98': 58,
            '97': 50,
            '96': 44,
            '95': 38,
            '94': 30,
            '93': 24,
            '92': 18,
            '91': 8,
            '90': 6,
            '89': -2,
            '88': -8,
            '87': -14,
            '86': -20,
            '85': -26,
            '84': -30,
            '83': -36,
            '82': -42,
            '81': -48,
            '80': -54,
            '79': -60,
            '78': -66,
            '77': -70,
            '76': -76,
            '75': -82,
            '74': -86,
            '73': -90,
            '72': -91,
            '71': -92,
            '70': -93,
            '69': -94,
            '68': -95,
            '67': -96,
            '66': -96,
            '65': -97,
            '64': -97,
            '63': -98,
            '62': -98,
            '61': -99,
            '60': -99,
            '59': -100,
        }

        feature_d_max = (108, 100)
        feature_d_min = (37, -100)
        feature_d = {
            '108': 100,
            '107': 99,
            '106': 98,
            '104': 97,
            '103': 97,
            '102': 96,
            '101': 95,
            '100': 90,
            '99': 88,
            '98': 85,
            '97': 80,
            '96': 76,
            '95': 70,
            '94': 68,
            '93': 66,
            '92': 62,
            '91': 58,
            '90': 54,
            '89': 52,
            '88': 50,
            '87': 48,
            '86': 46,
            '85': 44,
            '84': 42,
            '83': 40,
            '82': 38,
            '81': 36,
            '80': 34,
            '79': 32,
            '78': 28,
            '77': 24,
            '76': 20,
            '75': 14,
            '74': 10,
            '73': 6,
            '72': 2,
            '71': -2,
            '70': -6,
            '69': -8,
            '68': -10,
            '67': -12,
            '66': -16,
            '65': -20,
            '64': -24,
            '63': -28,
            '62': -30,
            '61': -36,
            '60': -42,
            '59': -48,
            '58': -50,
            '57': -52,
            '56': -56,
            '55': -60,
            '54': -62,
            '53': -64,
            '52': -70,
            '51': -74,
            '50': -76,
            '49': -80,
            '48': -82,
            '47': -86,
            '46': -90,
            '45': -92,
            '44': -93,
            '43': -94,
            '42': -95,
            '41': -96,
            '40': -97,
            '39': -98,
            '38': -99,
            '37': -100,
        }

        feature_e_max = (108, 100)
        feature_e_min = (54, -100)
        feature_e = {
            '108': 100,
            '107': 100,
            '106': 100,
            '105': 100,
            '104': 99,
            '103': 99,
            '102': 98,
            '101': 97,
            '100': 97,
            '99': 96,
            '98': 94,
            '97': 92,
            '96': 90,
            '95': 88,
            '94': 84,
            '93': 80,
            '92': 76,
            '91': 72,
            '90': 70,
            '89': 66,
            '88': 62,
            '87': 58,
            '86': 54,
            '85': 50,
            '84': 46,
            '83': 42,
            '82': 38,
            '81': 34,
            '80': 30,
            '79': 28,
            '78': 24,
            '77': 20,
            '76': 16,
            '75': 12,
            '74': 8,
            '73': 4,
            '72': 2,
            '71': -12,
            '70': -26,
            '69': -38,
            '68': -48,
            '67': -58,
            '66': -66,
            '65': -74,
            '64': -78,
            '63': -82,
            '62': -86,
            '61': -90,
            '60': -92,
            '59': -94,
            '58': -96,
            '57': -97,
            '56': -98,
            '55': -99,
            '54': -100,
        }

        feature_f_max = (108, 100)
        feature_f_min = (58, -100)
        feature_f = {
            '108': 100,
            '107': 100,
            '106': 99,
            '104': 98,
            '103': 97,
            '102': 94,
            '101': 92,
            '100': 90,
            '99': 87,
            '98': 84,
            '97': 81,
            '96': 78,
            '95': 75,
            '94': 72,
            '93': 70,
            '92': 67,
            '91': 64,
            '90': 61,
            '89': 57,
            '88': 54,
            '87': 51,
            '86': 48,
            '85': 45,
            '84': 42,
            '83': 39,
            '82': 36,
            '81': 33,
            '80': 30,
            '79': 27,
            '78': 24,
            '77': 21,
            '76': 18,
            '75': 15,
            '74': 12,
            '73': 9,
            '72': 6,
            '71': 3,
            '70': -10,
            '69': -22,
            '68': -36,
            '67': -48,
            '66': -58,
            '65': -68,
            '64': -78,
            '63': -86,
            '62': -92,
            '61': -97,
            '60': -98,
            '59': -99,
            '58': -100,
        }

        feature_g_max = (112, 100)
        feature_g_min = (61, -100)
        feature_g = {
            '112': 100,
            '111': 99,
            '110': 98,
            '109': 90,
            '108': 88,
            '107': 86,
            '106': 82,
            '104': 78,
            '103': 66,
            '102': 54,
            '101': 42,
            '100': 30,
            '99': 20,
            '98': 10,
            '97': 0,
            '96': -8,
            '95': -14,
            '94': -18,
            '93': -28,
            '92': -38,
            '91': -44,
            '90': -52,
            '89': -58,
            '88': -64,
            '87': -68,
            '86': -72,
            '85': -78,
            '84': -80,
            '83': -84,
            '82': -87,
            '81': -88,
            '80': -90,
            '79': -91,
            '78': -92,
            '77': -93,
            '76': -94,
            '75': -95,
            '74': -96,
            '73': -96,
            '72': -97,
            '71': -98,
            '70': -98,
            '69': -98,
            '68': -99,
            '67': -99,
            '66': -99,
            '65': -99,
            '64': -99,
            '63': -99,
            '62': -99,
            '61': -100,
        }

        feature_h_max = (115, 90)
        feature_h_min = (63, -100)
        feature_h = {
            '115': 90,
            '114': 86,
            '113': 80,
            '112': 76,
            '111': 70,
            '110': 64,
            '109': 58,
            '108': 50,
            '107': 42,
            '106': 34,
            '105': 24,
            '104': 16,
            '103': 6,
            '102': 0,
            '101': -2,
            '100': - 4,
            '99': -6,
            '98': -8,
            '97': -10,
            '96': -12,
            '95': -22,
            '94': -30,
            '93': -36,
            '92': -42,
            '91': -46,
            '90': -52,
            '89': -56,
            '88': -58,
            '87': -62,
            '86': -66,
            '85': -70,
            '84': -74,
            '83': -76,
            '82': -80,
            '81': -83,
            '80': -84,
            '79': -85,
            '78': -86,
            '77': -87,
            '76': -88,
            '75': -89,
            '74': -90,
            '73': -91,
            '72': -92,
            '71': -93,
            '70': -94,
            '69': -95,
            '68': -96,
            '67': -97,
            '66': -98,
            '65': -99,
            '64': -99,
            '63': -100,
        }

        feature_i_max = (101, 100)
        feature_i_min = (63, -100)
        feature_i = {
            '101': 100,
            '100': 99,
            '99': 98,
            '98': 95,
            '97': 92,
            '96': 86,
            '95': 80,
            '94': 72,
            '93': 64,
            '92': 56,
            '91': 46,
            '90': 34,
            '89': 22,
            '88': 12,
            '87': 10,
            '86': -2,
            '85': -14,
            '84': -28,
            '83': -40,
            '82': -50,
            '81': -62,
            '80': -70,
            '79': -80,
            '78': -86,
            '77': -90,
            '76': -92,
            '75': -95,
            '74': -96,
            '73': -96,
            '72': -97,
            '71': -97,
            '70': -98,
            '69': -98,
            '68': -98,
            '67': -99,
            '66': -99,
            '65': -99,
            '64': -99,
            '63': -100,
        }

        feature_j_max = (114, 100)
        feature_j_min = (54, -100)
        feature_j = {
            '114': 100,
            '113': 98,
            '112': 94,
            '111': 90,
            '110': 88,
            '109': 84,
            '108': 80,
            '107': 74,
            '106': 68,
            '104': 58,
            '103': 52,
            '102': 44,
            '101': 38,
            '100': 30,
            '99': 22,
            '98': 14,
            '97': 8,
            '96': 2,
            '95': -2,
            '94': -10,
            '93': -14,
            '92': -20,
            '91': -24,
            '90': -28,
            '89': -32,
            '88': -36,
            '87': -40,
            '86': -44,
            '85': -46,
            '84': -50,
            '83': -56,
            '82': -58,
            '81': -60,
            '80': -62,
            '79': -66,
            '78': -68,
            '77': -70,
            '76': -72,
            '75': -74,
            '74': -76,
            '73': -78,
            '72': -82,
            '71': -84,
            '70': -86,
            '69': -88,
            '68': -90,
            '67': -92,
            '66': -93,
            '65': -94,
            '64': -95,
            '63': -95,
            '62': -96,
            '61': -96,
            '60': -97,
            '59': -98,
            '58': -98,
            '57': -99,
            '56': -99,
            '55': -99,
            '54': -100,
        }

    RANGE_1 = {'min': 70, 'max': 100}
    RANGE_2 = {'min': 20, 'max': 69}
    RANGE_3 = {'min': -39, 'max': 19}
    RANGE_4 = {'min': -100, 'max': -40}


def process_test_one(answers: list, is_man: bool) -> dict:
    points_dict, unstables = get_points_for_test_one(answers)
    percent_points_dict = get_percent_for_test_one(points_dict, is_man)
    characteristic_ranges = get_characteristic_ranges_for_test_one(percent_points_dict)
    characteristics = get_characteristics_for_test_one(characteristic_ranges, unstables)
    conclusions = get_conclusion_for_test_one(characteristic_ranges, percent_points_dict)
    return {
        'points': percent_points_dict,
        'characteristics': characteristics,
        'conclusions': conclusions,
    }


def get_points_for_test_one(answers: list) -> tuple:
    points_a = points_b = points_c = points_d = points_e = points_f = points_g = points_h = points_i = points_j = 0
    unstable_e = unstable_b = False

    for i, answer in enumerate(answers):
        j = i + 1

        if j == 22 and answer == 1:
            unstable_e = True
        if j == 197 and answer == 1:
            unstable_b = True

        score_position = None
        if answer == 1:
            score_position = 0
        elif answer == 0:
            score_position = 1
        elif answer == -1:
            score_position = 2

        if j in TestOne.feature_a:
            points_a += TestOne.scores[str(j)][score_position]
        elif j in TestOne.feature_b:
            points_b += TestOne.scores[str(j)][score_position]
        elif j in TestOne.feature_c:
            points_c += TestOne.scores[str(j)][score_position]
        elif j in TestOne.feature_d:
            points_d += TestOne.scores[str(j)][score_position]
        elif j in TestOne.feature_e:
            points_e += TestOne.scores[str(j)][score_position]
        elif j in TestOne.feature_f:
            points_f += TestOne.scores[str(j)][score_position]
        elif j in TestOne.feature_g:
            points_g += TestOne.scores[str(j)][score_position]
        elif j in TestOne.feature_h:
            points_h += TestOne.scores[str(j)][score_position]
        elif j in TestOne.feature_i:
            points_i += TestOne.scores[str(j)][score_position]
        elif j in TestOne.feature_j:
            points_j += TestOne.scores[str(j)][score_position]

    points = points_a, points_b, points_c, points_d, points_e, points_f, points_g, points_h, points_i, points_j
    points_dict = {
        'A': points[0],
        'B': points[1],
        'C': points[2],
        'D': points[3],
        'E': points[4],
        'F': points[5],
        'G': points[6],
        'H': points[7],
        'I': points[8],
        'J': points[9],
    }
    unstables = unstable_b, unstable_e
    return points_dict, unstables


def get_percent_for_test_one(points: dict, is_man: bool):
    points_a, points_b, points_c, points_d, points_e, points_f, points_g, points_h, points_i, points_j = \
        points['A'], points['B'], points['C'], points['D'], points['E'], points['F'], points['G'], points['H'], points['I'], points['J']

    percent_class = TestOne.PercentForMan if is_man else TestOne.PercentForWoman

    if points_a > percent_class.feature_a_max[0]:
        percent_a = percent_class.feature_a_max[1]
    elif points_a < percent_class.feature_a_min[0]:
        percent_a = percent_class.feature_a_min[1]
    else:
        percent_a = percent_class.feature_a[str(points_a)]

    if points_b > percent_class.feature_b_max[0]:
        percent_b = percent_class.feature_b_max[1]
    elif points_b < percent_class.feature_b_min[0]:
        percent_b = percent_class.feature_b_min[1]
    else:
        percent_b = percent_class.feature_b[str(points_b)]

    if points_c > percent_class.feature_c_max[0]:
        percent_c = percent_class.feature_c_max[1]
    elif points_c < percent_class.feature_c_min[0]:
        percent_c = percent_class.feature_c_min[1]
    else:
        percent_c = percent_class.feature_c[str(points_c)]

    if points_d > percent_class.feature_d_max[0]:
        percent_d = percent_class.feature_d_max[1]
    elif points_d < percent_class.feature_d_min[0]:
        percent_d = percent_class.feature_d_min[1]
    else:
        percent_d = percent_class.feature_d[str(points_d)]

    if points_e > percent_class.feature_e_max[0]:
        percent_e = percent_class.feature_e_max[1]
    elif points_e < percent_class.feature_e_min[0]:
        percent_e = percent_class.feature_e_min[1]
    else:
        percent_e = percent_class.feature_e[str(points_e)]

    if points_f > percent_class.feature_f_max[0]:
        percent_f = percent_class.feature_f_max[1]
    elif points_f < percent_class.feature_f_min[0]:
        percent_f = percent_class.feature_f_min[1]
    else:
        percent_f = percent_class.feature_f[str(points_f)]

    if points_g > percent_class.feature_g_max[0]:
        percent_g = percent_class.feature_g_max[1]
    elif points_g < percent_class.feature_g_min[0]:
        percent_g = percent_class.feature_g_min[1]
    else:
        percent_g = percent_class.feature_g[str(points_g)]

    if points_h > percent_class.feature_h_max[0]:
        percent_h = percent_class.feature_h_max[1]
    elif points_h < percent_class.feature_h_min[0]:
        percent_h = percent_class.feature_h_min[1]
    else:
        percent_h = percent_class.feature_h[str(points_h)]

    if points_i > percent_class.feature_i_max[0]:
        percent_i = percent_class.feature_i_max[1]
    elif points_i < percent_class.feature_i_min[0]:
        percent_i = percent_class.feature_i_min[1]
    else:
        percent_i = percent_class.feature_i[str(points_i)]

    if points_j > percent_class.feature_j_max[0]:
        percent_j = percent_class.feature_j_max[1]
    elif points_j < percent_class.feature_j_min[0]:
        percent_j = percent_class.feature_j_min[1]
    else:
        percent_j = percent_class.feature_j[str(points_j)]

    percent_points_dict = {
        'A': percent_a,
        'B': percent_b,
        'C': percent_c,
        'D': percent_d,
        'E': percent_e,
        'F': percent_f,
        'G': percent_g,
        'H': percent_h,
        'I': percent_i,
        'J': percent_j,
    }

    return percent_points_dict


def get_characteristic_ranges_for_test_one(percents: dict) -> dict:
    percent_a, percent_b, percent_c, percent_d, percent_e, percent_f, percent_g, percent_h, percent_i, percent_j = \
        percents['A'], percents['B'], percents['C'], percents['D'], percents['E'], percents['F'], percents['G'], percents['H'], percents['I'], percents['J']
    result = {}

    if TestOne.RANGE_1['min'] <= percent_a <= TestOne.RANGE_1['max']:
        result['A'] = 1
    elif TestOne.RANGE_2['min'] <= percent_a <= TestOne.RANGE_2['max']:
        result['A'] = 2
    elif TestOne.RANGE_3['min'] <= percent_a <= TestOne.RANGE_3['max']:
        result['A'] = 3
    elif TestOne.RANGE_4['min'] <= percent_a <= TestOne.RANGE_4['max']:
        result['A'] = 4

    if TestOne.RANGE_1['min'] <= percent_b <= TestOne.RANGE_1['max']:
        result['B'] = 1
    elif TestOne.RANGE_2['min'] <= percent_b <= TestOne.RANGE_2['max']:
        result['B'] = 2
    elif TestOne.RANGE_3['min'] <= percent_b <= TestOne.RANGE_3['max']:
        result['B'] = 3
    elif TestOne.RANGE_4['min'] <= percent_b <= TestOne.RANGE_4['max']:
        result['B'] = 4

    if TestOne.RANGE_1['min'] <= percent_c <= TestOne.RANGE_1['max']:
        result['C'] = 1
    elif TestOne.RANGE_2['min'] <= percent_c <= TestOne.RANGE_2['max']:
        result['C'] = 2
    elif TestOne.RANGE_3['min'] <= percent_c <= TestOne.RANGE_3['max']:
        result['C'] = 3
    elif TestOne.RANGE_4['min'] <= percent_c <= TestOne.RANGE_4['max']:
        result['C'] = 4

    if TestOne.RANGE_1['min'] <= percent_d <= TestOne.RANGE_1['max']:
        result['D'] = 1
    elif TestOne.RANGE_2['min'] <= percent_d <= TestOne.RANGE_2['max']:
        result['D'] = 2
    elif TestOne.RANGE_3['min'] <= percent_d <= TestOne.RANGE_3['max']:
        result['D'] = 3
    elif TestOne.RANGE_4['min'] <= percent_d <= TestOne.RANGE_4['max']:
        result['D'] = 4

    if TestOne.RANGE_1['min'] <= percent_e <= TestOne.RANGE_1['max']:
        result['E'] = 1
    elif TestOne.RANGE_2['min'] <= percent_e <= TestOne.RANGE_2['max']:
        result['E'] = 2
    elif TestOne.RANGE_3['min'] <= percent_e <= TestOne.RANGE_3['max']:
        result['E'] = 3
    elif TestOne.RANGE_4['min'] <= percent_e <= TestOne.RANGE_4['max']:
        result['E'] = 4

    if TestOne.RANGE_1['min'] <= percent_f <= TestOne.RANGE_1['max']:
        result['F'] = 1
    elif TestOne.RANGE_2['min'] <= percent_f <= TestOne.RANGE_2['max']:
        result['F'] = 2
    elif TestOne.RANGE_3['min'] <= percent_f <= TestOne.RANGE_3['max']:
        result['F'] = 3
    elif TestOne.RANGE_4['min'] <= percent_f <= TestOne.RANGE_4['max']:
        result['F'] = 4

    if TestOne.RANGE_1['min'] <= percent_g <= TestOne.RANGE_1['max']:
        result['G'] = 1
    elif TestOne.RANGE_2['min'] <= percent_g <= TestOne.RANGE_2['max']:
        result['G'] = 2
    elif TestOne.RANGE_3['min'] <= percent_g <= TestOne.RANGE_3['max']:
        result['G'] = 3
    elif TestOne.RANGE_4['min'] <= percent_g <= TestOne.RANGE_4['max']:
        result['G'] = 4

    if TestOne.RANGE_1['min'] <= percent_h <= TestOne.RANGE_1['max']:
        result['H'] = 1
    elif TestOne.RANGE_2['min'] <= percent_h <= TestOne.RANGE_2['max']:
        result['H'] = 2
    elif TestOne.RANGE_3['min'] <= percent_h <= TestOne.RANGE_3['max']:
        result['H'] = 3
    elif TestOne.RANGE_4['min'] <= percent_h <= TestOne.RANGE_4['max']:
        result['H'] = 4

    if TestOne.RANGE_1['min'] <= percent_i <= TestOne.RANGE_1['max']:
        result['I'] = 1
    elif TestOne.RANGE_2['min'] <= percent_i <= TestOne.RANGE_2['max']:
        result['I'] = 2
    elif TestOne.RANGE_3['min'] <= percent_i <= TestOne.RANGE_3['max']:
        result['I'] = 3
    elif TestOne.RANGE_4['min'] <= percent_i <= TestOne.RANGE_4['max']:
        result['I'] = 4

    if TestOne.RANGE_1['min'] <= percent_j <= TestOne.RANGE_1['max']:
        result['J'] = 1
    elif TestOne.RANGE_2['min'] <= percent_j <= TestOne.RANGE_2['max']:
        result['J'] = 2
    elif TestOne.RANGE_3['min'] <= percent_j <= TestOne.RANGE_3['max']:
        result['J'] = 3
    elif TestOne.RANGE_4['min'] <= percent_j <= TestOne.RANGE_4['max']:
        result['J'] = 4

    return result


class TestOneCharacteristics:
    A1 = 'У данного человека твёрдый и устойчивый характер. Он обладает очень хорошей способностью концентрировать внимание на выполнении текущих дел. Он принимает хорошо обдуманные решения и здраво судит об этих вопросах. У него есть собственное мнение, и он не подвержен влиянию своих эмоций или эмоций окружающих людей. Он может быть очень преданным и стойким.'
    A2 = 'У данного человека достаточно стабильный характер. Он может, хотя и с небольшими трудностями, концентрироваться на текущих делах. Он старается принимать обдуманные решения, но у него это не всегда получается, так как иногда он подвержен влиянию своих эмоций или эмоций окружающих людей. Его мнение может меняться, так же, как и его приверженность.'
    A3 = 'У данного человека может быть нестабильный характер. Ему трудновато  сосредоточиться на текущих делах, так как его внимание может отвлечься на другие вещи или зафиксироваться на чём-то, не относящемся к делу. Его решения иногда ненадёжны, а суждения могут быть - неточными. Порой он легко попадает под влияние других людей, поэтому его мнения меняются то в одну, то в другую сторону.'
    A4 = 'У данного человека в основном нестабильный характер. У него время от времени плохая память и ему бывает трудно сосредоточиться на текущих делах, или же его внимание может быть навязчиво зафиксировано на чём-то. Порой его легко внушить, поэтому его решения, суждения и мнения могут быть ненадёжными. Людям трудно его понять, так как он импульсивен.'

    B0 = 'У этого человека утверждения о счастье, не всегда верны. Уровень счастья нестабилен, и бывают периоды счастья и радости, которые сменяются периодами депрессии и уныния.'
    B1 = 'Обычно человек вполне счастлив и весел. Его подход к жизни основан на хорошем юморе. В решении проблем ему присуще энтузиазм и интерес. Он с надеждой смотрит в будущее и спокойно воспринимает огорчения. Любые проблемы или эмоциональные трудности, с которыми сталкивается, лишь временно расстраивают его, но как только они разрешаются, он легко возвращаетесь к своему обычному хорошему настроению.'
    B2 = 'Он довольно счастливый и весёлый человек, но не всегда. Жизненные проблемы и трудности выводят его из равновесия, и ему довольно трудно вновь обрести воодушевление и радостное отношение к жизни. Он считает, что до некоторой степени его хорошее настроение зависит от других людей и от обстоятельств, а не просто от его отношения к жизни. Однако гораздо чаще ему присуще лёгкое настроение.'
    B3 = 'Человек изредка бывает несчастен и подавлен. У него пессимистичное отношение к жизни. Проблемы и трудности кажутся для него слишком большими и ему тяжело с ними справляться, так как он в основном подавлен. Он обвиняет других людей, проблемы или обстоятельства в своём подавленном состоянии, вместо того чтобы найти истинную причину в себе. Из-за этого его друзьям и членам семьи иногда бывает трудно находиться в его обществе.'
    B4 = 'Личность кой-когда печальна, несчастна и находиться в состоянии депрессии. Он смотрит в будущее с пессимизмом. Друзьям и членам семьи иногда трудно находиться рядом с ним, так как он возлагает вину на других людей, на обстоятельства или жизненные ситуации. Не видит настоящих причин, ради которых стоило бы жить, так как его жизнь полна проблем и трудностей.'

    C1 = 'Человеку присущи самообладание и невозмутимость. В мыслях он уравновешен и в целом спокоен. Самообладание позволяет без особых беспокойств для себя и для других справляться с любыми чрезвычайными ситуациями в окружении людей. У него ровный характер, что помогает иметь хорошие отношения с членами семьи и с друзьями. Человеку свойственны терпимость и терпеливость.'
    C2 = 'Обычно человек спокоен и уравновешен, однако неожиданные события в окружении могут нарушить спокойствие. Как правило, человека нелегко вывести из себя. Иногда бывают моменты нервозности, но он способен вновь обрести самообладание. Иногда бывает непримирим и нетерпелив, что создаёт трудности для семьи и друзей.'
    C3 = 'Временами бывает нервозен и чрезмерно возбудим. Бывают моменты, когда его беспокойность и возбуждённость раздражает окружающих людей. Иногда бывает трудно расслабиться, чтобы отдохнуть и порадоваться жизни. Порою есть нервные привычки, о которых он сам может и знать, и не знать. Его внимание легко отвлекается, бывает даже теряет самоконтроль.'
    C4 = 'Он часто находиться в нервозном состоянии. Бывает что, он не знает, как контролировать себя даже при обычных обстоятельствах. Временами он не  умеет расслабляться и быть полностью спокойным даже в течение короткого времени. Его нервные привычки и состояние возбуждения могут растроить окружающих его людей. Изредка раздражителен и может даже быть истеричным или яростным в своих действиях. Есть много-чего, что может вывести его из себя.'

    D1 = 'У него большая уверенность в том, что он знает и понимает в жизни. Человеку свойственно хорошее понимание самого себя, своих ценных качеств и недостатков, способностей и слабых сторон, целей и стремлений в жизни. Его реалистичное отношение к себе удерживает его от совершения серьёзных ошибок.'
    D2 = 'Он может достаточно реалистично оценивать себя, но испытывает небольшие трудности в этом. Его понимание самого себя могло бы быть намного лучше. Поскольку он не слишком уверен в своих способностях или неспособностях, он склонен менять своё отношение к вещам, к тому, что для него является правдой. Иногда трудно понять, чего он хочет достичь в жизни, однако не в такой степени, чтобы совершать действительно серьёзные ошибки.'
    D3 = 'По сути он иногда ненадёжный человек. Он слабо уверен в себе, и это мешает ему добиться целей, которые ставит в жизни. Из-за неуверенности в себе, ему трудно определить, каких целей ему следует добиваться, а каких нет. Это усугубляется тем, что он в действительности не представляет себе, каковы же способности и неспособности.'
    D4 = 'Он в основном ненадёжный человек, и у него полностью отсутствует уверенность в себе. Может быть не уверен в своём прошлом, настоящем и будущем. Частично, он не знает чему верить, что думать, что следует делать в жизни, имеет нереалистичный подход к жизни, и это усугубляется тем фактом, что он не знает, что хочет или ждёт от жизни.'

    E0 = 'Утверждения об активности не всегда верны. Этот фактор нестабилен, и в какой - то период он активен, а в какой - то - нет. Это говорит о том, что он чувствует, будто многие действия навязываются ему - он скорее должен их делать, чем хочет их делать.'
    E1 = 'Очень активный человек, способен определить, что он хочет сделать, затем сделать это и завершить это дело. Справляется с проблемами, организуя свою работу, получая хорошие результаты без замешательства. Не откладывает выполнение важных и необходимых дел, так как есть энергия и настойчивость, чтобы добиться их выполнения.'
    E2 = 'В целом активный, но не способный выполнить всё, что мог или хотел бы сделать. Бывает трудно начать выполнение какой - либо работы, а когда дело начато, ему бывает трудно его завершить. Либо решает выполнить больше, чем может, либо для вас представляет трудность решить, что именно ему надо делать'
    E3 = 'Неактивный. Его трудность в том, чтобы начать делать те дела, которые, как вы знаете, нужно сделать или которые ему хотелось бы сделать. После того начинает делать что-то, у него также возникают большие трудности с продолжением и завершением этой работы или деятельности. Из-за этого у него могут быть трудности в работе или профессии, поэтому ему трудно сохранить своё рабочее место.'
    E4 = 'Человек в основном неактивный. Ему очень редко удаётся заставить себя начать выполнение даже самых необходимых дел или видов работы, и он часто не доводит их до конца. Члены семьи и начальник на работе считают, что он ленивый. Это создаёт плохие отношения и трудности на работе.'

    F1 = 'Очень способный и открытый человек. Способный хорошо справляется с тем, что решает делать в жизни. Довольно прямолинеен в своём подходе к людям не только на работе или в своей профессии, но также с друзьями и членами семьи, и благодаря этому прямолинейному подходу может справляться с любыми жизненными ситуациями и контролировать других людей.'
    F2 = 'Он способный и открытый человек, но, возможно, не в такой степени, как ему того бы хотелось. Несмотря на то, что он - способный человек, у него бывают отдельные трудности, связанные с жизнью, работой или профессией. Отчасти его трудности вызваны тем, что не очень хорошо умеет открыто работать с людьми и отдавать им необходимые приказы и указания.'
    F3 = 'Порой в отношениях с людьми замкнут и покорен, из-за этого не может справляться с жизнью. Бывает что, слишком послушен и уклончив в отношениях с другими людьми, так как может бояться того, что они подумают, скажут или сделают. Этот страх перед другими людьми мешает честно и открыто справляться с его работой или профессией, мешает в семейных отношениях и в отношениях с друзьями.'
    F4 = 'Он находиться в плохом состоянии по отношению к жизни из-за своей замкнутости и покорности. Бывает интровертирован и боится прямо работать с людьми или вещами в своём окружении. Боится других людей, что может управлять ими только скрытно. Эта неспособность создаёт вокруг атмосферу хаоса и проблем.'

    G1 = 'Довольно ответственный человек. Чувствует, что определённо контролирует свою жизнь. Способен предпринимать действия и нести ответственность за их успех или неудачу. Умеет прямо смотреть на проблемы и решать их, используя для этого все свои способности, вместо того чтобы полагать, что это не касается и что другие люди обязаны всем этим заниматься.'
    G2 = 'Его чувство ответственности не так велико, каким бы ему следовало быть. Это вызвано тем фактом, что у него есть склонность считать, что кто-то другой в большей или меньшей степени руководит его жизнью, будь то начальник, друг или член семьи. Он бы мог намного больше контролировать свою жизнь, но предпочитает не брать на себя слишком много ответственности, поскольку полагает, что если не очень хорошо справиться, то в этом будут обвинять его.'
    G3 = 'Бывает безответственен в жизни и в работе. Может перекладывать свою ответственность на других людей, будь то начальник, друг или член семьи. Ему кажется, что он не контролирует свою жизнь, то, что он делает, кем он является и что хочет иметь в жизни. Хотя чувствует, что другие люди контролируют его, а на самом деле ему трудновато взять контроль на себя.'
    G4 = 'Часто бывает безответственен. В некоторых случаях обвиняет других в том, что они управляют его жизнь и сделали её такой, какая она есть, но на самом деле это его собственная вина, поскольку особо не принимал на себя свою долю ответственности. Ему часто бывает жаль себя, что жизнь сделала его жертвой.'

    H1 = 'Вполне понимающий человек. Способен наслаждаться своим окружением и окружающими его людьми. Общий взгляд на жизнь характеризует справедливость, так как он способен увидеть как плохое, так и хорошее в людях и в жизни в целом. Он довольно правильно оценивает ситуацию, и благодаря этому обладает проницательностью и может хорошо отличать одно от другого.'
    H2 = 'Будучи склонным быть критичным, также может довольно правильно оценивать людей и события. Однако иногда трудно увидеть все положительные стороны, так как ему свойственно уделять больше внимания плохому в людях и в делах. Он не такой понимающий человек, каким могли бы быть или как следовало бы быть.'
    H3 = 'Критичный человек. Другим людям не легко общаться с ним из-за выраженного или скрытого неодобрительного отношения к людям и делам. В основном из-за постоянного внимания к плохим сторонам вещей замечает мало хорошего, в результате чего у него плохая способность правильно оценивать людей и обстоятельства.'
    H4 = 'Крайне критичный человек. На словах или в мыслях резко критикует окружающих людей и обстоятельства, в результате чего почти невозможно иметь дело с ним. Ему самому может казаться, что его критика конструктивна или реалистична, тогда как на самом деле он может быть придирчивым. Поскольку видит мало хорошего в людях или в жизни.'

    I1 = 'Человеку свойственна высокая степень симпатии. Тогда можете вникнуть в ситуацию другого человека и тем самым лучше понять его точку зрения и чувства или то, что произошло или происходит. Он способен изменять свои действия, так чтобы они были уместными в тех обстоятельствах, в которых оказались.'
    I2 = 'Умеет чувствовать другого человека, но не в такой степени, как следовало бы. Хотя бы способен в определённой степени поставить себя на место другого человека, он не всегда это делает, что снижает способность понимать других. Кроме того, его недостаток понимания других людей иногда приводит к тому, что его действия или слова иногда оказываются неуместными или некорректными.'
    I3 = 'Затрудняется чувствовать других людей. Человек не может поставить себя на место другого человека и тем самым понять его точку зрения или его ситуацию. В результате этого он производит впечатление недоброжелательного человека, что создаёт для него не мало проблем в отношениях с другими людьми. И это делает его неотзывчивым и трудным в общении для окружающих.'
    I4 = 'Порой холодный и бессердечный человек. Его неспособность вникнуть в ситуацию или положение другого человека, и тем самым лучше понять его самого, создаёт для него много трудностей во взаимоотношениях с людьми в жизни. Он придаёт большое значение себе и своей точке зрения, и поэтому бывает неспособен считаться с мнением других.'

    J1 = 'Очень общительный человек и ему нравится разговаривать с людьми. В компании он легко общается и легко ведёт беседу с большинством присутствующих. Может чувствовать или не чувствовать полную раскованность, общаясь с людьми, но это никак не сказывается на его способности доносить до них свои идеи или мнения.'
    J2 = 'Он умеет свободно общаться с людьми, но не в той степени, которая является достаточной для того, чтобы иметь по-настоящему большой успех в обществе или в бизнес. Ему, может быть, свойственно замыкаться в себе. Это может быть вызвано застенчивостью или неприязнью к отдельным людям. Без сомнения, ему следует поднять способность открыто общаться с другими людьми, чтобы улучшить своё положение в обществе и в бизнесе.'
    J3 = 'Замкнут. Ему трудно свободно общаться с другими людьми, возможно, из-за своей застенчивости или неприязни к людям. Такой человек, как он, также опасается, что другие могут узнать о нём что-то такое, что дискредитирует его в их глазах. Его неспособность свободно и открыто общаться с другими людьми иногда мешает ему заводить друзей и достигать успеха в работе.'
    J4 = 'Крайне замкнутый человек. Это может быть результатом того, что он либо застенчив, либо не любит людей, либо и то, и другое. В дополнение к этому то, что он особо не общается с людьми и это говорит о его стремлении скрыть от других что-то, что он не хочет, чтобы они узнали. Его неспособность свободно общаться очень сильно мешает ему в жизни.'


def get_characteristics_for_test_one(characteristic_ranges: dict, unstables: tuple) -> list:
    unstable_b, unstable_e = unstables
    characteristics = []
    for key, value in characteristic_ranges.items():
        characteristic_name = f'{key}{value}'

        if characteristic_name.startswith('B') and unstable_b:
            characteristic_text = getattr(TestOneCharacteristics, 'B0')
            characteristic_name = 'НЕПОСТ. В'
        elif characteristic_name.startswith('E') and unstable_e:
            characteristic_text = getattr(TestOneCharacteristics, 'E0')
            characteristic_name = 'НЕПОСТ. E'
        else:
            characteristic_text = getattr(TestOneCharacteristics, characteristic_name)

        characteristics.append({characteristic_name: characteristic_text})
    return characteristics


class TestOneConclusions:
    SIMPLE = [
        {
            'name': 'Черта G +90, черта I +90',
            'description': 'Комплекс мученика или преследуемого. Возможно, человек лжёт. Комплекс мученика– одна из нередких психологических проблем, которая представляет собой искаженные модели мышления и восприятия. При таком мировоззрении человек чувствует себя ответственным за других и не вправе отказывать другим или каким-то образом обделять их.'
        },
        {
            'name': 'А1 В3-4',
            'description': 'Грустный и депрессивный, и его взгляд на жизнь пессимистичен. Проблем и трудностей так много, что он не в состоянии с ними справиться. Они заставляют его быть недостаточно разумным и надёжным, а кроме того, они воздействуют на его способность сосредотачиваться, хотя он может считать разумность, надёжность и способность сосредотачиваться своими лучшими качествами. Именно по этой причине его семья и его друзья считают, что им трудно находиться рядом с ним.'
        },
        {
            'name': 'А1 С3-4',
            'description': 'Человек иногда раздражителен и чрезмерно возбудимый. Его беспокойство и возбуждение оказывает негативный эффект не только на других, но и на него самого. Его неспособность расслабиться и нервозное состояние приводят его к нестабильному состоянию, уменьшают его способность концентрироваться и заставляют его быть ненадёжным в его решениях и недостаточно разумным, даже если ему хочется думать, что с этими чертами у него всё в порядке.'
        },
        {
            'name': 'В1 А3-4',
            'description': 'Поскольку у человека есть трудности с концентрацией его внимания, а его характер нестабильный и импульсивный, он не такой счастливый человек, каким он считает себя или каким он хочет быть. Окружающих расстраивают такое его качество как ненадёжность, а также то, что они не могут положиться на него. В свете этого, его энтузиазм и интерес к жизни на самом деле меньше и слабее.'
        },
        {
            'name': 'В1 С3-4',
            'description': 'Ему не хватает спокойствия и способности расслабиться, что приводит к тому, что он на самом деле менее счастлив, чем он, как правило, считает. Его нервные привычки снижают его энтузиазм и интерес к жизни больше, чем он полагает. Он слишком легко приходит во взволнованное и раздражительное состояние, для того чтобы поддерживать в себе действительно счастливое и оптимистичное расположение духа. Его хорошее настроение легко портится такой нервозностью.'
        },
        {
            'name': 'С1 А3-4',
            'description': 'Человек нестабилен и рассеян. Он очень слабо контролирует своё внимание, которое легко рассеивается или фиксируется на каком-нибудь отдельном препятствии. Поэтому он не настолько хорошо владеет собой, как он хотел бы, чтобы о него думали другие люди. Его спокойствие — это просто маска, за которой он хочет спрятать его нестабильность и ненадёжность.'
        },
        {
            'name': 'С1 В3-4',
            'description': 'Человек в основном не доволен своей жизнью. Она заставляет его быть гораздо более нервозным, чем он сам хотел бы быть. Проблемы и трудности, являющиеся причиной его депрессии, очень сильно расстраивают его, и он отчаянно пытается скрыть это под маской внешнего спокойствия и безмятежности. Его попытки сохранить эту маску спокойствия потерпят неудачу, если только причины его несчастий не будут устранены.'
        },
        {
            'name': 'D1 A3-4',
            'description': 'У человека нестабильный характер и он импульсивен и рассеян. Он неспособен сосредотачивать своё внимание, которое либо блуждает, либо компульсивно фиксируется на чём-то. Он ошибочно считает себя надёжным человеком, но такая надёжность и уверенность основаны на гипнотических решениях, суждениях и мнениях, которые он не может контролировать или не способен изменять.'
        },
        {
            'name': 'E1 D3-4',
            'description': 'Человек по временам ненадёжен и не верит в себя. На самом деле он не может решить для себя, какие цели он хочет достичь, а какие - нет, хотя он достаточно активен. Не все его действия в действительности контролируются им, потому что он в действительности не знает, чего он хочет достичь, делая что-то. Он чувствует, что для него лучше делать что-нибудь, чем ничего не делать, но такая бесцельная деятельность создаст ему трудности.'
        },
        {
            'name': 'Е1 F3-4',
            'description': 'Человек замкнутый и покорный. Он боится иметь дело с людьми и сталкиваться с какими-нибудь ситуациями в открытую - только скрытно. Это создаёт ему много трудностей. То, что он настолько активный, но в то же время достаточно замкнутый, говорит о том, что он делает вещи, с которыми на самом деле не может справиться. В будущем это принесёт ему очень много трудностей.'
        },
        {
            'name': 'F1 E3-4',
            'description': 'Человек не очень активный. Он испытывает трудности с тем, чтобы начать какие-либо действия и продолжить их, когда они уже начаты, однако, он достаточно способный и открыто может контролировать людей и ситуации. Следовательно, из-за его обычной лени он не делает всего того, что он реально способен делать, и растрачивает свои таланты.'
        },
        {
            'name': 'F1 G3-4',
            'description': 'Человек иногда безответственен в жизни и в работе. Он может обвинять других в том, что происходит с ним, и не будет признавать никаких мнений о том, что он должен иметь какую бы то ни было ответственность за то, что с ним происходит или произойдёт. Тот факт, что он достаточно способен и открыт и тем не менее немного безответственен, говорит о том, что он способен совершать действия, не заботясь о последствиях. Это очень опасная позиция, и она доставит ему неприятности, если ещё не доставила.'
        },
        {
            'name': 'G1 F3-4',
            'description': 'Человек не является способным или открытым. Ему сложно открыто встретиться лицом к лицу с другими людьми или ситуациями. Даже несмотря на то, что он считает, что он достаточно ответственный и способный стать причиной чего-либо человек, это на самом деле не так. Что-то делает его ответственным до некоторой степени, но ему, как индивиду, лучше следить за своими действиями, так как в противном случае у него возникнут трудности.'
        },
        {
            'name': 'H1 I3-4',
            'description': 'Человек не способен быть чутким, так как он не умеет ставить себя на место другого человека и, следовательно, понять его точку зрения или ситуацию. Из-за этого он в действительности не настолько воспримчив, как он считает сам, так как он пытается быть честным в его отношении только поверхностно. Фактически, его недостаток понимания — это плохо, и он может притворяться, что видит хорошее.'
        },
        {
            'name': 'I1 H3-4',
            'description': 'Человек крайне критичен. Он устно и мысленно атакует окружающих его людей низким и злобным образом. Он думает, что может видеть их позицию и точку зрения, но на самом деле это только притворство, так как в действительности в других людях и в том, что его окружает, он видит большей частью только плохое. Он может быть достаточно жестоким.'
        },
    ]

    COMPLEX = [
        {
            'name': 'Точки А, В и С внизу',
            'description': 'Невротик. Прочно застрял в прошлых потерях. Этот синдром часто указывает на то, что человеку в детстве не уделялось достаточно внимания.'
        },
        {
            'name': 'Точка А внизу, точка Е вверху',
            'description': 'Человек рассеян. Не умеющий сосредоточиться, невнимательный и несобранный.'
        },
        {
            'name': 'Точки А, В и С внизу, точка Е вверху',
            'description': 'Человек может быть склонен к суициду.'
        },
        {
            'name': 'Точки A и J внизу',
            'description': 'Человек, возможно, находится в окружении, где его реальность уничтожается и он не может общаться, потому что это общение будет извращено и использовано против него.'
        },
        {
            'name': 'Точки A, C и G внизу, точка F вверху',
            'description': 'Вспышки гнева. Несдержанность. отсутствие способности сдерживаться. Может быть обусловлено нервным или психическим заболеванием, расстроенностью, возмущением, дурным характером, обидой.'
        },
        {
            'name': 'Точка A вверху, точка H внизу',
            'description': 'Педант. Требует от себя и окружающих соблюдения предельной точности и аккуратности в каких-либо действиях, склонный к неукоснительному соблюдению формальных требований и правил.'
        },
        {
            'name': 'Точка A вверху, точка D в середине графика',
            'description': 'Человек действует, опираясь на стабильные данные, а не на свою уверенность. Это – «интеллектуальное понимание». Большинство студентов будут стараться действовать таким образом в случае, если они сами не полностью владеют данными.'
        },
        {
            'name': 'Точки B и G внизу, точка F вверху',
            'description': 'Чувство неполноценности. Выражается в чувстве собственной ущербности и превосходства окружающих.'
        },
        {
            'name': 'Точка B вверху, точка D внизу',
            'description': 'Веселье безумия. Человек любит нарушать законы, правила и делает это с весельем. '
        },
        {
            'name': 'Точки C и H внизу',
            'description': 'Проблема настоящего времени. Это особая проблема, которая существует в физической вселенной сейчас, и на которой зафиксировано внимание данного человека. Внимание этого человека находится "где-то там", а не на его работе.'
        },
        {
            'name': 'Точка D внизу, точка J вверху',
            'description': 'Не может сдержаться. Компульсивен. Не может противиться ни тем, ни другим, а невыполнение их ведет к тревоге.'
        },
        {
            'name': 'Точка D внизу, точка G вверху',
            'description': 'Компульсивный экстраверт. Человек не может отвязаться, к действиям, которые вынужден выполнять. Не может противиться ни тем, ни другим, а невыполнение их ведет к тревоге. Но в то же время, этот человек, обращенный вовне, открытый миру, направленный к людям.'
        },
        {
            'name': 'Точки D, E и F вверху, остальная часть графика очень низкая',
            'description': 'Капризный, иногда безответственный, занят самим собой, извращенное отношение ко всем динамикам, потенциально деструктивный.'
        },
        {
            'name': 'Точки D, G, H и I внизу',
            'description': 'Не предоставляет бытийность.  Бытийность — это состояние в котором человек находится, просто являясь собой, переживая свою истинную природу. А у этого человека с этим проблемы.'
        },
        {
            'name': 'Точки E, F и J внизу',
            'description': 'У человека может быть гормональная недостаточность и требуется консультация квалифицированного врача.'
        },
        {
            'name': 'Точки E и F внизу',
            'description': 'Человек возможно принимает алкоголь или вредные вещества, подавлен.'
        },
        {
            'name': 'Точка Е вверху, точка G внизу',
            'description': 'Недостаток инициативы. Быть инициативным — значит быть самостоятельным, проявлять волю к достижению личных и общественных целей, предпринимать проактивные действия к желаемой цели. А у этого человека с этим проблемы.'
        },
        {
            'name': 'Точка F вверху, точки G и H внизу',
            'description': 'С этим человеком трудно ладить. Он замкнутый или может вас разочаровать.'
        },
        {
            'name': 'Точки I, J и B вверху, точка F находится либо в среднем диапазоне, либо внизу',
            'description': 'Слащавый и приятный.'
        },
        {
            'name': 'Точка I вверху, точка J внизу',
            'description': 'Задабривание. Человек делает синтонные действия (подарки, услуги, приятные слова и демонстрация симпатии) с целью устранить неприязненное отношение к себе или другим, завоевать расположение и повысить свой статус.'
        },
        {
            'name': 'Точки A, C, D, G, H, I, J внизу',
            'description': 'Плохие работники. Такие люди опаздывают на работу. Возможно работают медленно или быстро, но с ошибками. Не доводят порученное задание до конца. Могут много отпрашиваться. Очень часто допускают ошибки. Не несут ответственности за свои ошибки.'
        },
        {
            'name': 'Точка С выше, чем все остальные',
            'description': 'Самоконтроль, обусловленный строгим воспитанием, цель которого состояла в том, что человек не должен показывать никаких эмоций или выражать какое-либо мнение.'
        },
        {
            'name': 'Точка D выше, чем все остальные',
            'description': 'Эйфория - использует наилучшим образом ситуации, в которых находится. В жизни этот человек сражается и мало чего добивается. Настоящее общественное положение позволяет человеку достаточно хорошо скрывать это под маской "со мной всё в порядке".'
        },
        {
            'name': 'Точка E выше, чем F',
            'description': 'Человек делает больше того, что он может комфортно и умело контролировать. Это хороший работник.'
        },
        {
            'name': 'Точка F выше, чем E',
            'description': 'Не делает того, что может.'
        },
        {
            'name': 'I выше, чем другие',
            'description': 'Человек слишком мягкий и доверчивый, «простофиля». Его легко обмануть.'
        },
    ]


def get_conclusion_for_test_one(char_ranges: dict, percent_points: dict) -> list:
    if check_if_all_points_in_first_range(char_ranges):
        return []
    if check_if_answers_are_all_random(percent_points):
        return []

    simple_conclusions = get_simple_conclusion_for_test_one(char_ranges, percent_points)
    complex_conclusions = get_complex_conclusion_for_test_one(char_ranges, percent_points)

    return simple_conclusions + complex_conclusions


def get_simple_conclusion_for_test_one(char_ranges: dict, percent_points: dict) -> list:
    conclusions = []

    if percent_points['G'] >= 90 and percent_points['I'] >= 90:
        conclusions.append(TestOneConclusions.SIMPLE[0])

    if char_ranges['A'] == 1 and char_ranges['B'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[1])

    if char_ranges['A'] == 1 and char_ranges['C'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[2])

    if char_ranges['B'] == 1 and char_ranges['A'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[3])

    if char_ranges['B'] == 1 and char_ranges['C'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[4])

    if char_ranges['C'] == 1 and char_ranges['A'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[5])

    if char_ranges['C'] == 1 and char_ranges['B'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[6])

    if char_ranges['D'] == 1 and char_ranges['A'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[7])

    if char_ranges['E'] == 1 and char_ranges['D'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[8])

    if char_ranges['E'] == 1 and char_ranges['F'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[9])

    if char_ranges['F'] == 1 and char_ranges['E'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[10])

    if char_ranges['F'] == 1 and char_ranges['G'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[11])

    if char_ranges['G'] == 1 and char_ranges['F'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[12])

    if char_ranges['H'] == 1 and char_ranges['I'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[13])

    if char_ranges['I'] == 1 and char_ranges['H'] in [3, 4]:
        conclusions.append(TestOneConclusions.SIMPLE[14])

    return conclusions


def get_complex_conclusion_for_test_one(char_ranges: dict, points: dict) -> list:
    points_sorted = list(points.items())
    points_sorted.sort(key=lambda x: x[1])
    conclusions = []

    if char_ranges['A'] == char_ranges['B'] == char_ranges['C'] == 4:
        conclusions.append(TestOneConclusions.COMPLEX[0])

    if char_ranges['A'] == 4 and char_ranges['E'] == 1:
        conclusions.append(TestOneConclusions.COMPLEX[1])

    if char_ranges['A'] == char_ranges['B'] == char_ranges['C'] == 4 and char_ranges['E'] == 1:
        conclusions.append(TestOneConclusions.COMPLEX[2])

    if char_ranges['A'] == char_ranges['J'] == 4:
        conclusions.append(TestOneConclusions.COMPLEX[3])

    if char_ranges['A'] == char_ranges['C'] == char_ranges['G'] == 4 and char_ranges['F'] == 1:
        conclusions.append(TestOneConclusions.COMPLEX[4])

    if char_ranges['A'] == 1 and char_ranges['H'] == 4:
        conclusions.append(TestOneConclusions.COMPLEX[5])

    if char_ranges['A'] == 1 and char_ranges['D'] in [3, 4]:
        conclusions.append(TestOneConclusions.COMPLEX[6])

    if char_ranges['B'] == char_ranges['G'] == 4 and char_ranges['F'] == 1:
        conclusions.append(TestOneConclusions.COMPLEX[7])

    if char_ranges['B'] == 1 and char_ranges['D'] == 4:
        conclusions.append(TestOneConclusions.COMPLEX[8])

    if char_ranges['C'] == char_ranges['H'] == 4:
        conclusions.append(TestOneConclusions.COMPLEX[9])

    if char_ranges['D'] == 4 and char_ranges['J'] == 1:
        conclusions.append(TestOneConclusions.COMPLEX[10])

    if char_ranges['D'] == 4 and char_ranges['G'] == 1:
        conclusions.append(TestOneConclusions.COMPLEX[11])

    other_part_is_very_low_11 = char_ranges['A'] + char_ranges['B'] + char_ranges['C'] + char_ranges['G'] + char_ranges['H'] + char_ranges['I'] + char_ranges['J']
    if char_ranges['D'] == char_ranges['E'] == char_ranges['F'] == 1 and other_part_is_very_low_11 >= 26:
        conclusions.append(TestOneConclusions.COMPLEX[12])

    if char_ranges['D'] == char_ranges['G'] == char_ranges['H'] == char_ranges['I'] == 4:
        conclusions.append(TestOneConclusions.COMPLEX[13])

    if char_ranges['E'] == char_ranges['F'] == char_ranges['J'] == 4:
        conclusions.append(TestOneConclusions.COMPLEX[14])

    if char_ranges['E'] == char_ranges['F'] == 4:
        conclusions.append(TestOneConclusions.COMPLEX[15])

    if char_ranges['E'] == 1 and char_ranges['G'] == 4:
        conclusions.append(TestOneConclusions.COMPLEX[16])

    if char_ranges['F'] == 1 and char_ranges['G'] == char_ranges['H'] == 4:
        conclusions.append(TestOneConclusions.COMPLEX[17])

    if char_ranges['I'] == char_ranges['J'] == char_ranges['B'] == 1 and char_ranges['F'] in [2, 3, 4]:
        conclusions.append(TestOneConclusions.COMPLEX[18])

    if char_ranges['I'] == 1 and char_ranges['J'] == 4:
        conclusions.append(TestOneConclusions.COMPLEX[19])

    if char_ranges['A'] + char_ranges['C'] + char_ranges['D'] + char_ranges['G'] + char_ranges['H'] + char_ranges['I'] + char_ranges['J'] >= 26:
        conclusions.append(TestOneConclusions.COMPLEX[20])

    if is_given_key_highest_or_has_only_one_equal_value(points_sorted, 'C'):
        conclusions.append(TestOneConclusions.COMPLEX[21])

    if is_given_key_highest_or_has_only_one_equal_value(points_sorted, 'D'):
        conclusions.append(TestOneConclusions.COMPLEX[22])

    if points['E'] >= points['F']:
        conclusions.append(TestOneConclusions.COMPLEX[23])

    if points['F'] >= points['E']:
        conclusions.append(TestOneConclusions.COMPLEX[24])

    if is_given_key_highest_or_has_only_one_equal_value(points_sorted, 'I'):
        conclusions.append(TestOneConclusions.COMPLEX[25])

    return conclusions


def is_given_key_highest_or_has_only_one_equal_value(points: list, key: str) -> bool:
    is_highest = points[-1][0] == key and points[-1][1] > points[-2][1]
    is_two_values_highest = points[-1][1] == points[-2][1] and points[-2][1] > points[-3][1]
    is_one_of_two_last_key_wee_need = points[-1][0] == key or points[-2][0] == key
    return is_highest or is_two_values_highest and is_one_of_two_last_key_wee_need


def check_if_all_points_in_first_range(char_ranges: dict) -> bool:
    high_points_count = 0
    for key, value in char_ranges.items():
        if value == 1:
            high_points_count += 1
    if high_points_count == len(char_ranges):
        return True

    return False


def check_if_answers_are_all_random(points: dict) -> bool:
    random_answers = {
        'A': {'min': -38, 'max': -95},
        'B': {'min': -100, 'max': -65},
        'C': {'min': -96, 'max': -63},
        'D': {'min': -83, 'max': 35},
        'E': {'min': 3, 'max': 45},
        'F': {'min': 22, 'max': 72},
        'G': {'min': -92, 'max': -55},
        'H': {'min': -98, 'max': -35},
        'I': {'min': -90, 'max': 18},
        'J': {'min': -72, 'max': 22},
    }

    random_answers_count = 0
    for key, value in points.items():
        if random_answers[key]['min'] <= value <= random_answers[key]['max']:
            random_answers_count += 1
    if random_answers_count == len(points):
        return True

    return False
